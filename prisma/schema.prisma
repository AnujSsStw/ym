// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model SavedRecipe {
    id        Int      @id @default(autoincrement())
    recipeId  Int
    title     String
    thumbnail String
    savedAt   DateTime @default(now())

    savedBy   User   @relation(fields: [savedById], references: [id])
    savedById String

    // @@index([name])
}

model Review {
    id        Int      @id @default(autoincrement())
    recipeId  Int
    rating    Int
    comment   String
    createdAt DateTime @default(now())

    reviewedBy   User   @relation(fields: [reviewedById], references: [id])
    reviewedById String
}

model UserCreateRecipe {
    id                Int      @id @default(autoincrement())
    name              String   @default("Untitled Recipe")
    thumbnail         String
    description       String
    ingredients       String
    instructions      String
    cook_time_minutes Int      @default(0)
    prep_time_minutes Int      @default(0)
    servings          Int      @default(1)
    num_servings      Int      @default(1)
    // tags         String
    createdAt         DateTime @default(now())

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
}

model Follows {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    // The user who is following
    followerId String
    follower   User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)

    // The user being followed
    followingId String
    following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

    @@unique([followerId, followingId])
    @@index([followerId])
    @@index([followingId])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    savedRecipes     SavedRecipe[]
    reviews          Review[]
    UserCreateRecipe UserCreateRecipe[]

    followers Follows[] @relation("following")
    following Follows[] @relation("follower")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
